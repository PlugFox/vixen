import 'package:test/test.dart';
import 'package:vixen/vixen.dart';

void main() {
  group('unit', () {
    test('arguments', () {
      expect(() => Arguments.parse(['-t 123']), returnsNormally);
    });

    test('create_captcha', () {
      final generator = CaptchaGenerator();
      expectLater(generator.generate(length: 6), completes);
      expectLater(
        generator.generate(length: 6),
        completion(
          isA<Captcha>()
              .having((c) => c.length, 'length', 6)
              .having((c) => c.numbers.length == c.length, 'numbers', isTrue)
              .having((c) => c.text.length == c.length, 'text', isTrue)
              .having((c) => c.image.length, 'image', greaterThan(0)),
        ),
      );
    });
  });

  antiSpamTest();
}

void antiSpamTest() {
  group('AntiSpam Tests', () {
    // Helper function to make tests more readable
    bool isSpam(String text) {
      final result = AntiSpam.checkSync(text);
      return result.spam;
    }

    group('Basic Text Tests', () {
      test('empty text should not be spam', () async {
        expect(isSpam(''), isFalse);
      });

      test('normal text should not be spam', () async {
        expect(isSpam('–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å.'), isFalse);
      });

      test('very short text should not be spam', () async {
        expect(isSpam('–û–∫'), isFalse);
      });
    });

    group('Capital Letters Tests', () {
      test('text with normal capitalization should not be spam', () async {
        expect(isSpam('–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –ü—Ä–æ—à–µ–ª –¢–≤–æ–π –î–µ–Ω—å?'), isFalse);
      });

      test('text with excessive caps should be spam', () async {
        expect(isSpam('–°–£–ü–ï–† –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï! –¢–û–õ–¨–ö–û –°–ï–ì–û–î–ù–Ø! –í–°–ï –ë–ï–°–ü–õ–ê–¢–ù–û!'), isTrue);
      });

      test('mixed caps should be detected', () async {
        expect(isSpam('–°—É–ü–µ–† –ó–∞–†–∞–ë–æ–¢–æ–ö –≤ –°–µ–¢–∏!!!'), isTrue);
      });
    });

    group('URL Tests', () {
      test('text with single URL should not be spam', () async {
        expect(isSpam('–ü–æ—Å–º–æ—Ç—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Å—Ç–∞—Ç—å—é https://example.com'), isFalse);
      });

      test('text with multiple URLs should be spam', () async {
        expect(
          isSpam('''
            https://buy.com
            https://cheap.com
            https://discount.com
            https://best-price.com
          '''),
          isTrue,
        );
      });

      test('text with suspicious domain should be flagged', () async {
        expect(isSpam('–ó–∞—Ö–æ–¥–∏ –Ω–∞ super-money.xyz –∏ easy-money.online!'), isTrue);
      });
    });

    group('Spam Phrases Tests', () {
      test('single spam phrase detection', () async {
        expect(isSpam('–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç 100000 —Ä—É–±–ª–µ–π!'), isTrue);
      });

      test('multiple spam phrases detection', () async {
        expect(isSpam('–ë—ã—Å—Ç—Ä—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫! –†–∞–±–æ—Ç–∞ –Ω–∞ –¥–æ–º—É! –ë–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π!'), isTrue);
      });

      test('spam phrase with normal context should still be detected', () async {
        expect(isSpam('–Ø –Ω–∞—à–µ–ª —Å–ø–æ—Å–æ–± –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!'), isTrue);
      });
    });

    group('Character Replacement Tests', () {
      test('mixed alphabet detection', () async {
        expect(isSpam('Zarabotok na domu!'), isTrue);
      });

      test('normal text with numbers should not be spam', () async {
        expect(isSpam('–í—Å—Ç—Ä–µ—á–∞–µ–º—Å—è –≤ 12:30 –≤–æ–∑–ª–µ –≤—Ö–æ–¥–∞'), isFalse);
      });
    });

    group('Repetitive Pattern Tests', () {
      test('repeated words detection', () async {
        expect(isSpam('–ö—É–ø–∏—Ç—å –∫—É–ø–∏—Ç—å –∫—É–ø–∏—Ç—å –∫—É–ø–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!'), isTrue);
      });

      test('repeated patterns detection', () async {
        expect(isSpam('–ê–∫—Ü–∏—è! –ê–∫—Ü–∏—è! –ê–∫—Ü–∏—è! –ê–∫—Ü–∏—è! –°–∫–∏–¥–∫–∏! –°–∫–∏–¥–∫–∏! –°–∫–∏–¥–∫–∏!'), isTrue);
      });

      test('normal repetition should not be spam', () async {
        expect(isSpam('–î–∞-–¥–∞, —è —Ç–µ–±—è —Å–ª—ã—à—É. –•–æ—Ä–æ—à–æ-—Ö–æ—Ä–æ—à–æ.'), isFalse);
      });
    });

    group('Special Cases Tests', () {
      test('emoji-only text should not be spam', () async {
        expect(isSpam('üëã üåû üòä'), isFalse);
      });

      test('text with normal emoji usage should not be spam', () async {
        expect(isSpam('–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? üòä'), isFalse);
      });

      test('excessive emoji with spam content should be spam', () async {
        expect(isSpam('‚ÄºÔ∏è–°–£–ü–ï–† –ê–ö–¶–ò–Ø‚ÄºÔ∏è üí∞–î–ï–ù–¨–ì–òüí∞ üî•–°–ö–ò–î–ö–òüî•'), isTrue);
      });
    });

    group('Mixed Content Tests', () {
      test('legitimate business announcement should not be spam', () async {
        expect(
          isSpam('''
            –£–≤–∞–∂–∞–µ–º—ã–µ –∫–ª–∏–µ–Ω—Ç—ã!
            –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤–∞—Å –æ –ø–ª–∞–Ω–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ 25 –º–∞—Ä—Ç–∞.
            –°–µ—Ä–≤–∏—Å –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å 2:00 –¥–æ 5:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.
            –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.
          '''),
          isFalse,
        );
      });

      test('legitimate sale announcement should not be spam', () async {
        expect(
          isSpam('''
            –í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ —Å–µ–∑–æ–Ω–Ω–∞—è —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞.
            –°–∫–∏–¥–∫–∏ –Ω–∞ –∑–∏–º–Ω—é—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–æ 30%.
            –ñ–¥–µ–º –≤–∞—Å –ø–æ –∞–¥—Ä–µ—Å—É: —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1
            –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 10:00 - 20:00
          '''),
          isFalse,
        );
      });

      test('spam with legitimate-looking content should be detected', () async {
        expect(
          isSpam('''
            –°–†–û–ß–ù–û! –¢–û–õ–¨–ö–û –°–ï–ì–û–î–ù–Ø!
            –†–∞—Å–ø—Ä–æ–¥–∞–∂–∞ –±—Ä–µ–Ω–¥–æ–≤–æ–π –æ–¥–µ–∂–¥—ã!
            –°–∫–∏–¥–∫–∏ –¥–æ 90%!!!
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ!!!
            –°–ø–µ—à–∏—Ç–µ –∫—É–ø–∏—Ç—å –ø–æ –°–£–ü–ï–† –¶–ï–ù–ï!!!
            –ñ–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!!!
            www.super-sale.xyz
          '''),
          isTrue,
        );
      });
    });

    group('Edge Cases Tests', () {
      test('text with multiple languages should be handled', () async {
        expect(isSpam('Hello! –ü—Ä–∏–≤–µ—Ç! Bonjour! ‰Ω†Â•Ω!'), isFalse);
      });

      test('text with special characters should be handled', () async {
        expect(isSpam(r'$#@&* —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #@$*&'), isFalse);
      });

      test('very long text should be handled', () async {
        var longText = '–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. ' * 100;
        expect(isSpam(longText), isTrue); // repetition
      });

      test('html content should be handled', () async {
        expect(isSpam('<b>–ö–£–ü–ò–¢–¨ –°–ï–ô–ß–ê–°</b> <i>–ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ!!!</i>'), isTrue);
      });
    });

    group('Suspicious Domains Tests', () {
      test('extractDomains should find all domains in text', () {
        const text = '''
          Check out these sites:
          https://example.com
          http://test.xyz
          www.spam.space
          good.website
          —Ç–µ—Å—Ç.—Ä—Ñ
        ''';

        final domains = AntiSpam.extractDomains(text);
        expect(domains, containsAll(['example.com', 'test.xyz', 'www.spam.space', 'good.website']));
      });

      test('isSuspiciousDomain should detect suspicious TLDs', () {
        expect(AntiSpam.hasSuspiciousDomains('test.xyz'), isTrue);
        expect(AntiSpam.hasSuspiciousDomains('example.space'), isTrue);
        expect(AntiSpam.hasSuspiciousDomains('spam.top'), isTrue);
        expect(AntiSpam.hasSuspiciousDomains('test.com'), isFalse);
        expect(AntiSpam.hasSuspiciousDomains('example.org'), isFalse);
      });

      test('countSuspiciousDomains should count correctly', () {
        const text = '''
          Check these:
          https://good.com
          http://bad.xyz
          www.spam.space
          normal.org
          test.top
        ''';

        expect(AntiSpam.countSuspiciousDomains(text), 3); // xyz, space, top
      });

      test('should not detect cyrillic domains', () {
        expect(AntiSpam.hasSuspiciousDomains('—Ç–µ—Å—Ç.—Ä—Ñ'), isFalse);
        expect(AntiSpam.hasSuspiciousDomains('—Å–∞–π—Ç.–º–æ—Å–∫–≤–∞'), isFalse);
      });

      test('should handle domains with subdomains', () {
        expect(AntiSpam.hasSuspiciousDomains('sub.test.xyz'), isTrue);
        expect(AntiSpam.hasSuspiciousDomains('sub.example.com'), isFalse);
      });

      test('should detect mixed legitimate and suspicious domains', () async {
        const text = '''
          –ù–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç: example.com
          –ê —Ç–∞–∫–∂–µ: spam.xyz, test.space
        ''';

        final result = await AntiSpam.check(text);
        expect(result.spam, isTrue);
        expect(result.reason, contains('Suspicious domains'));
      });

      test('should ignore domains in legitimate contexts', () async {
        const text = '''
          –£–≤–∞–∂–∞–µ–º—ã–µ –∫–ª–∏–µ–Ω—Ç—ã!
          –ù–∞—à –Ω–æ–≤—ã–π —Å–∞–π—Ç: example.com
          –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        ''';

        final result = await AntiSpam.check(text);
        expect(result.spam, isFalse);
      });
    });

    group('False Positive Prevention Tests', () {
      test('business email should not be spam', () async {
        expect(
          isSpam('''
            –£–≤–∞–∂–∞–µ–º—ã–µ –∫–æ–ª–ª–µ–≥–∏,

            –ù–∞–ø—Ä–∞–≤–ª—è—é –≤–∞–º –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ –º–∞—Ä—Ç 2024 –≥–æ–¥–∞.
            –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ 1,250,000 —Ä—É–±–ª–µ–π.
            –†–æ—Å—Ç –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –º–µ—Å—è—Ü–µ–º: 15%.

            –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
            –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
            –û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂
          '''),
          isFalse,
        );
      });

      test('legitimate newsletter should not be spam', () async {
        expect(
          isSpam('''
            –ù–æ–≤–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏ "–ü—Ä–∏–º–µ—Ä"

            1. –û—Ç–∫—Ä—ã—Ç –Ω–æ–≤—ã–π –æ—Ñ–∏—Å –≤ –ú–æ—Å–∫–≤–µ
            2. –ó–∞–ø—É—â–µ–Ω–∞ –∞–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            3. –û–±–Ω–æ–≤–ª–µ–Ω –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏

            –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ example.com
          '''),
          isFalse,
        );
      });

      test('technical instructions should not be spam', () async {
        expect(
          isSpam('''
            –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:
            1. –°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª
            2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫
            3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ

            –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: support@example.com
          '''),
          isFalse,
        );
      });
    });
  });
}
